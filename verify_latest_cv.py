#!/usr/bin/env python3
"""
Script para verificar el contenido del CV m√°s reciente generado
"""

from docx import Document
from pathlib import Path
import glob
import os

def verify_latest_cv():
    print('üîç VERIFICANDO CV M√ÅS RECIENTE')
    print('=' * 60)
    
    # Buscar el CV m√°s reciente
    output_dir = Path('output')
    if not output_dir.exists():
        print('‚ùå No se encontr√≥ la carpeta output')
        return
    
    # Buscar todos los archivos .docx en output
    docx_files = list(output_dir.rglob('*.docx'))
    if not docx_files:
        print('‚ùå No se encontraron archivos .docx en output')
        return
    
    # Obtener el archivo m√°s reciente
    latest_file = max(docx_files, key=lambda x: x.stat().st_mtime)
    
    print(f'üìÑ Archivo m√°s reciente: {latest_file}')
    print(f'üïê √öltima modificaci√≥n: {latest_file.stat().st_mtime}')
    print()
    
    # Leer el contenido
    try:
        doc = Document(str(latest_file))
        
        print('üìã CONTENIDO DEL CV:')
        print('=' * 60)
        
        in_experience_section = False
        experience_titles = []
        
        for i, paragraph in enumerate(doc.paragraphs):
            text = paragraph.text.strip()
            if not text:
                continue
            
            # Detectar secci√≥n de experiencia
            if 'PROFESSIONAL EXPERIENCE' in text.upper():
                in_experience_section = True
                print(f'üìù L√≠nea {i+1}: {text}')
                continue
            
            if in_experience_section:
                # Buscar t√≠tulos de experiencia (sin bullet points)
                if not text.startswith('‚Ä¢') and not text.startswith('-') and not text.startswith('*'):
                    # Verificar si es un t√≠tulo de trabajo
                    if any(keyword in text.lower() for keyword in ['manager', 'analyst', 'specialist', 'coordinator']):
                        if len(text) < 100:  # T√≠tulos suelen ser cortos
                            experience_titles.append(text)
                            print(f'üéØ T√çTULO ENCONTRADO: {text}')
                        else:
                            print(f'üìù L√≠nea {i+1}: {text}')
                    else:
                        print(f'üìù L√≠nea {i+1}: {text}')
                else:
                    # Es un bullet point
                    print(f'   ‚Ä¢ {text}')
            else:
                print(f'üìù L√≠nea {i+1}: {text}')
        
        print()
        print('üéØ AN√ÅLISIS DE T√çTULOS DE EXPERIENCIA:')
        print('=' * 60)
        
        if experience_titles:
            print(f'‚úÖ Se encontraron {len(experience_titles)} t√≠tulos de experiencia:')
            for i, title in enumerate(experience_titles, 1):
                print(f'   {i}. {title}')
                
                # Verificar capitalizaci√≥n
                if title[0].islower():
                    print(f'      ‚ùå ERROR: T√≠tulo en min√∫sculas')
                else:
                    print(f'      ‚úÖ Capitalizaci√≥n correcta')
                
                # Verificar si contiene "Project Manager"
                if 'project manager' in title.lower():
                    print(f'      ‚úÖ Contiene "Project Manager"')
                else:
                    print(f'      ‚ùå NO contiene "Project Manager"')
        else:
            print('‚ùå No se encontraron t√≠tulos de experiencia')
        
        print()
        print('üîç VERIFICACI√ìN COMPLETA')
        
    except Exception as e:
        print(f'‚ùå Error al leer el archivo: {e}')

if __name__ == '__main__':
    verify_latest_cv()

